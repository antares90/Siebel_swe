<html>
<head>
    <title>Method HTTPUploadThroughPostAsMultiPageTIFF - Dynamic Web TWAIN 11</title>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <link href="../Styles/docs.css" type="text/css" rel="stylesheet" />
    <script src="../Scripts/common.js" type="text/javascript"></script>
</head>
<body id="docs-page">
    <div class='apiIndex'>
        <a href='../index.htm'>Index</a>&nbsp;&gt;&nbsp;
        <a href='method%20HTTPUploadThroughPostAsMultiPageTIFF.htm'>HTTPUploadThroughPostAsMultiPageTIFF</a>
    </div>
    <div class='content' id='content'>
        <h1>HTTPUploadThroughPostAsMultiPageTIFF()</h1>
        <h3>Description</h3>
        <p>Uploads selected images in Dynamic Web TWAIN viewer to the HTTP server as a TIFF file.</p>

        <h3>Syntax</h3>
        <div class='spec'>
            <p>
                .HTTPUploadThroughPostAsMultiPageTIFF(hTTPServer, actionPage, fileName, [optionalAsyncSuccessFunc, optionalAsyncFailureFunc]);
            </p>
        </div>
        <h3>Parameters</h3>
        <p>
            <code class="type">&lt;string&gt;</code> <code>hTTPServer</code>: specifies the name of HTTP server. For example: "www.dynamsoft.com", "localhost", "127.0.0.1".<br />
            <code class="type">&lt;string&gt;</code> <code>actionPage</code>: specifies the relative path for the action page. The action page will receive and process the uploaded image stream. See <a href="#skip">code snippet</a>.<br />
            <code class="type">&lt;string&gt;</code> <code>fileName</code>: specifies the file name.<br />
        </p>
        <p class="specialnotice">The following two parameters are optional. If either one exists or both exist, the method is asynchronous, otherwise it's synchronous.</p>
        <p>
            <code class="type">&lt;OnHttpUploadSuccess function&gt;</code> <code class="italic">optional</code> <code>optionalAsyncSuccessFunc</code>: callback function triggered when the file is uploaded successfully. <br />
            <code class="type">&lt;OnHttpUploadFailure function&gt;</code> <code class="italic">optional</code> <code>optionalAsyncFailureFunc</code>: callback function triggered when the file failed to be uploaded.
        </p>
        <p class="specialnotice">
            Please refer to the function prototype <a href="../Programmer%20Guide/Function%20Prototypes.htm#OnHttpUploadSuccess"><code class="type">OnHttpUploadSuccess</code></a> or <a href="../Programmer%20Guide/Function%20Prototypes.htm#OnHttpUploadFailure"><code class="type">OnHttpUploadFailure</code></a>.
        </p>
        <h3>Return value</h3>
        <p class="notice">Only valid when used synchronously.</p>
        <p><code class="type">bool</code></p>
        <p>
            <code>true</code> indicates success. <code>false</code> indicates failure.
        </p>
        <p>When <code>false</code> is returned, check <code><a href="../Properties/prop%20ErrorCode.htm">ErrorCode</a></code> or <code><a href="../Properties/prop%20ErrorString.htm">ErrorString</a></code> for error information.</p>
				<h3>Remarks</h3>
         <p class="notice">If you want to use this method to upload / download files through HTTPS, please don't forget to set <a href="../Properties/prop%20IfSSL.htm">IfSSL</a> to ture and set the correct <a href="../Properties/prop%20HTTPPort.htm">HTTPPort</a>. </p>
				<h3>See also</h3>
        <p>
            <code><a target="_blank" href="../Methods/method%20SetSelectedImageIndex.htm">SetSelectedImageIndex</a></code><br/>
            <code><a target="_blank" href="../Methods/method%20GetSelectedImagesSize.htm">GetSelectedImagesSize</a></code>
        </p>
				<h3 id="skip">Example</h3>
		<p>The sample shows how to programmatically select 1st, 3rd, 5th images and upload as a batch.</p>
		<p><code class="type">JavaScript:</code></p>
         <code class="language-javascript">
            <pre>
function btnScan_onclick() 
{
    if (DWObject) {
        DWObject.SelectSourceByIndex(document.getElementById("source").selectedIndex);
        DWObject.OpenSource();
        DWObject.IfDisableSourceAfterAcquire = true;
        DWObject.AcquireImage();
    }
}

// OnHttpUploadSuccess and OnHttpUploadFailure are callback functions.
function OnHttpUploadSuccess() {
    console.log('successful');
}
function OnHttpUploadFailure(errorCode, errorString, sHttpResponse) {
    alert(errorString + sHttpResponse);
}

function btnUpload_onclick() 
{
    var strHTTPServer = location.hostname; //The name of the HTTP server. 
    var CurrentPathName = unescape(location.pathname);
    var CurrentPath = CurrentPathName.substring(0, CurrentPathName.lastIndexOf("/") + 1);
    var strActionPage = CurrentPath + "SaveToFile.aspx";
    DWObject.IfSSL = false; // Set whether SSL is used
    DWObject.HTTPPort = location.port == "" ? 80 : location.port;

    DWObject.SelectedImagesCount = 3;
    DWObject.SetSelectedImageIndex(0, 0); // Set the 1st image as the first selected image.
    DWObject.SetSelectedImageIndex(1, 2); // Set the 3rd image as the second selected image.
    DWObject.SetSelectedImageIndex(2, 4); // Set the 5th image as the third selected image.
    DWObject.GetSelectedImagesSize(2); // 2 - TIFF format. Calculate the size of selected images in TIFF format.

    // Upload the selected images to the server asynchronously
    DWObject.HTTPUploadThroughPostAsMultiPageTIFF(
      strHTTPServer, 
      strActionPage, 
      "imageData.tiff", 
      OnHttpUploadSuccess, 
      OnHttpUploadFailure
    );
} 
</pre>
        </code>
		<p><code class="type">SaveToFile.aspx:</code></p>
		<code class="language-javascript">
<pre>
<%@ Page Language="C#" %>
<%
    try{
        String strImageName;
        HttpFileCollection files = HttpContext.Current.Request.Files;
        HttpPostedFile uploadfile = files["RemoteFile"];
        strImageName = uploadfile.FileName;
        uploadfile.SaveAs(Server.MapPath(".") + "\\UploadedImages\\" + strImageName);
    }
    catch{
	}
%>
</pre>
        </code>
		
    </div>
</body>
</html>